@model LoginModel
@using Nop.Core
@using Nop.Core.Domain.Customers

@inject IWebHelper webHelper
@{
    Layout = "_ColumnsOne";

    //title
    NopHtml.AddTitleParts(T("PageTitle.Login").Text);
    //page class
    NopHtml.AppendPageCssClassParts("html-login-page");

    //register URL with return URL (if specified)
    var registerUrl = Url.RouteUrl("Register", new { returnUrl = this.Context.Request.Query["returnUrl"] }, webHelper.GetCurrentRequestProtocol());
}
<div class="page login-page section-width">
    <div class="section-padding">
        <div class="vult-page-title">
            <h1 class="vult-account-title">@T("Account.Login.Welcome")</h1>
        </div>
        @await Html.PartialAsync("_ExternalAuthentication.Errors")
        <div class="page-body">
            <div class="customer-blocks">
                @*@if (Model.RegistrationType == UserRegistrationType.Disabled)
                {
                    <div class="new-wrapper">
                        <div class="title">
                            @T("Account.Register")
                        </div>
                        <div class="text">
                            @T("Account.Register.Result.Disabled")
                        </div>
                    </div>
                }
                else if (Model.CheckoutAsGuest)
                {
                    <div class="new-wrapper checkout-as-guest-or-register-block">
                        <div class="title">
                            <strong>@T("Account.Login.CheckoutAsGuestOrRegister")</strong>
                        </div>
                        <div class="text">
                            @await Component.InvokeAsync(typeof(TopicBlockViewComponent), new { systemName = "CheckoutAsGuestOrRegister" })
                        </div>
                        <div class="buttons">
                            <button type="button" class="button-1 checkout-as-guest-button" onclick="location.href='@Url.RouteUrl("Checkout")'">@T("Account.Login.CheckoutAsGuest")</button>
                            <button type="button" class="button-1 register-button" onclick="location.href='@registerUrl'">@T("Account.Register")</button>
                        </div>
                    </div>
                }
                else
                {
                    <div class="new-wrapper register-block">
                        <div class="title">
                            <strong>@T("Account.Login.NewCustomer")</strong>
                        </div>
                        <div class="text">
                            @T("Account.Login.NewCustomerText")
                        </div>
                        <div class="buttons">
                            <button type="button" class="button-1 register-button" onclick="location.href='@registerUrl'">@T("Account.Register")</button>
                        </div>
                    </div>
                }*@
                <form asp-route="Login" asp-route-returnurl="@Context.Request.Query["ReturnUrl"]" method="post" autocomplete="off">
                    <div class="vult-form">
                        <div asp-validation-summary="ModelOnly" class="message-error">@T("Account.Login.Unsuccessful")</div>
                        <div class="vult-form-fields">
                            @if (Model.UsernamesEnabled)
                            {
                                <div class="inputs">
                                    <div class="vult-input">
                                        <input asp-for="Username" class="username vult-input-effect" autofocus="autofocus" placeholder="@T("account.fields.username")" />
                                        <label asp-for="Username"></label>
                                        <span class="focus-border"><i></i></span>
                                    </div>
                                    <span asp-validation-for="Username"></span>
                                </div>
                            }
                            else
                            {
                                <div class="inputs">
                                    <div class="vult-input">
                                        <input asp-for="Email" class="email vult-input-effect" autofocus="autofocus" placeholder="@T("account.fields.email")" />
                                        <label asp-for="Email"></label>
                                        <span class="focus-border"><i></i></span>
                                    </div>
                                    <span asp-validation-for="Email"></span>
                                </div>
                            }
                            <div class="inputs">
                                <div class="vult-input">
                                    <input asp-for="Password" class="password vult-input-effect" placeholder="@T("account.fields.password")" />
                                    <label asp-for="Password"></label>
                                    <span class="focus-border"><i></i></span>
                                </div>
                                <span asp-validation-for="Password"></span>
                            </div>
                            <div class="inputs reversed">
                                <div class="">
                                    <input class="inp-cbx" asp-for="RememberMe" />
                                    <label class="cbx" asp-for="RememberMe">
                                        @T("account.login.fields.rememberme")
                                        <span>
                                            <svg width="12px" height="10px" viewBox="0 0 12 10">
                                                <polyline points="1.5 6 4.5 9 10.5 1"></polyline>
                                            </svg>
                                        </span>
                                    </label>
                                </div>
                                <div class="vult-forgotpassword">
                                    <span class="forgot-password">
                                        <a asp-route="PasswordRecovery">@T("Account.Login.ForgotPassword")</a>
                                    </span>
                                </div>
                            </div>
                            @if (Model.DisplayCaptcha)
                            {
                                <nop-captcha />
                            }
                        </div>
                        <div class="buttons">
                            <button type="submit" class="button-1 login-button primary-btn"><span>@T("Account.Login.LoginButton")</span></button>
                            @if (Model.CheckoutAsGuest)
                            {
                                <div class="buttons">
                                    <button type="button" class="button-1 checkout-as-guest-button primary-btn" onclick="location.href='@Url.RouteUrl("Checkout")'"><span>@T("Account.Login.CheckoutAsGuest")</span></button>
                                </div>
                            }
                        </div>

                        <div class="vult-register-block">
                            <p>@T("Theme.Vulture.Login.RegisterLink.Title") <a href="@registerUrl">@T("Account.Register")</a></p>
                        </div>

                    </div>
                </form>
            </div>
            <div class="external-authentication">
                @await Component.InvokeAsync(typeof(ExternalMethodsViewComponent), "ExternalAuthentication")
            </div>
            @await Component.InvokeAsync(typeof(TopicBlockViewComponent), new { systemName = "LoginRegistrationInfo" })
        </div>
    </div>
</div>