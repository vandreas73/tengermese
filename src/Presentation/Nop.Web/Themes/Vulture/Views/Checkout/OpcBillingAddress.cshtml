@model CheckoutBillingAddressModel

<div class="checkout-data">
    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.OpCheckoutBillingAddressTop, additionalData = Model })
    @if (Model.ShipToSameAddressAllowed)
    {
        <div class="ship-to-same-address">
            <p class="selector">
                <input class="inp-cbx" asp-for="ShipToSameAddress" />
                <label class="cbx" asp-for="ShipToSameAddress">
                    @T("Checkout.ShipToSameAddress")
                    <span>
                        <svg width="12px" height="10px" viewBox="0 0 12 10"><polyline points="1.5 6 4.5 9 10.5 1"></polyline></svg>
                    </span>
                </label>
            </p>
        </div>
    }
    @if (Model.ExistingAddresses.Count > 0)
    {
        <div class="select-billing-address">
            <label for="billing-address-select">@T("Checkout.SelectBillingAddressOrEnterNewOne")</label>
            @if (Model.InvalidExistingAddresses.Count > 0)
            {
                <label class="min-amount-warning">
                    @string.Format(T("Checkout.Addresses.Invalid").Text, Model.InvalidExistingAddresses.Count)
                </label>
            }
            <div class="vult-input">
                <select name="billing_address_id" id="billing-address-select" class="address-select vult-input-effect vult-common-select"
                        title="" onchange="Billing.resetBillingForm();Billing.newAddress(!this.value)">
                    @foreach (var address in Model.ExistingAddresses)
                    {
                        var addressLine = "";
                        addressLine += address.FirstName;
                        addressLine += " " + address.LastName;
                        if (address.StreetAddressEnabled && !string.IsNullOrEmpty(address.Address1))
                        {
                            addressLine += ", " + address.Address1;
                        }
                        if (address.CityEnabled && !string.IsNullOrEmpty(address.City))
                        {
                            addressLine += ", " + address.City;
                        }
                        if (address.CountyEnabled && !string.IsNullOrEmpty(address.County))
                        {
                            addressLine += ", " + address.County;
                        }
                        if (address.StateProvinceEnabled && !string.IsNullOrEmpty(address.StateProvinceName))
                        {
                            addressLine += ", " + address.StateProvinceName;
                        }
                        if (address.ZipPostalCodeEnabled && !string.IsNullOrEmpty(address.ZipPostalCode))
                        {
                            addressLine += " " + address.ZipPostalCode;
                        }
                        if (address.CountryEnabled && !string.IsNullOrWhiteSpace(address.CountryName))
                        {
                            addressLine += ", " + address.CountryName;
                        }
                        //how should we render "FormattedCustomAddressAttributes" here?
                        <option value="@(address.Id)">@(addressLine)</option>
                    }
                    <option value="" selected="@Model.NewAddressPreselected">@T("Checkout.NewAddress")</option>
                </select>
                <span class="focus-border"><i></i></span>
            </div>
        </div>
    }
    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.OpCheckoutBillingAddressMiddle, additionalData = Model })
    <div class="new-billing-address" id="billing-new-address-form">
        @if (Model.EuVatEnabled)
        {
            <div class="inputs">
                <label asp-for="VatNumber" asp-postfix=":"></label>
                @if (Model.EuVatEnabledForGuests)
                {
                    <input asp-for="VatNumber" />
                    <span asp-validation-for="VatNumber"></span>
                }
                else
                {
                    <span class="vat-number-warning">
                        @T("Checkout.VatNumber.Disabled", Url.RouteUrl("CustomerInfo"))
                    </span>
                }
            </div>
        }
        <div class="enter-address">
            <div class="vult-form">
                <div asp-validation-summary="ModelOnly" class="message-error"></div>
                @{
                    var dataDictAddress = new ViewDataDictionary(ViewData);
                    dataDictAddress.TemplateInfo.HtmlFieldPrefix = "BillingNewAddress";
                    @await Html.PartialAsync("_CreateOrUpdateAddress", Model.BillingNewAddress, dataDictAddress)
                }
            </div>
        </div>
    </div>
    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.OpCheckoutBillingAddressBottom, additionalData = Model })
</div>


<script asp-location="Footer">
    var targetOffset = $("#opc-billing").offset().top;
    $("html, body").animate({ scrollTop: targetOffset - 400 }, "slow");
</script>