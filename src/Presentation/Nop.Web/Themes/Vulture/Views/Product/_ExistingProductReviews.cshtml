@model ExistingProductReviewsModel

@using Nop.Core.Domain.Catalog

@inject Nop.Services.Html.IHtmlFormatter htmlFormatter

@{
    int totalReview = Model.Items.Count;
    bool isSingleReviewInLastRow = totalReview % 2 != 0;
}

@if (Model.Items.Count > 0)
            {
                int count = 1;

                <div class="product-review-list">
                    <div class="title">
                        <strong>@T("Reviews.ExistingReviews")</strong>
                    </div>
                    <div class="vult-product-review-box">

                        @foreach (var review in Model.Items)
                        {
                            bool isLastReview = count == totalReview;
                            var ratingPercent = review.Rating * 20;
                            bool isFullWidthApplicable = totalReview == 1 || (isLastReview && isSingleReviewInLastRow);

                            <div class='product-review-item @(isFullWidthApplicable == true? "product-review-fullwidth-list" : "")'>
                                <div class="review-item-head">
                                    <div class="review-title">
                                        <strong>@review.Title</strong>
                                    </div>
                                    <div class="product-review-box">
                                        <div class="rating">
                                            <div style="width: @(ratingPercent)%">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="review-content">
                                    <div class="review-text">
                                        @if (!string.IsNullOrEmpty(review.CustomerAvatarUrl))
                                        {
                                            <div class="avatar">
                                                @if (review.AllowViewingProfiles)
                                                {
                                                    <a href="@Url.RouteUrl("CustomerProfile", new { id = review.CustomerId })" class="avatar-img-link">
                                                        <img src="@(review.CustomerAvatarUrl)" class="avatar-img" alt="Avatar" />
                                                    </a>
                                                }
                                                else
                                                {
                                                    <img src="@(review.CustomerAvatarUrl)" class="avatar-img" alt="Avatar" />
                                                }
                                            </div>
                                        }
                                        <div class="text-body">
                                            @Html.Raw(htmlFormatter.FormatText(review.ReviewText, false, true, false, false, false, false))
                                        </div>
                                    </div>
                                    @foreach (var reviewType in review.AdditionalProductReviewList.Where(x => x.Rating > 0 && x.VisibleToAllCustomers))
                                    {
                                        var ratingExtPercent = reviewType.Rating * 20;
                                        <div class="review-type-rating-ext">
                                            <div class="review-title">
                                                <i>@reviewType.Name</i>
                                            </div>
                                            <div class="product-review-box">
                                                <div class="rating">
                                                    <div style="width: @(ratingExtPercent)%">
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    <div class="review-info">
                                        <span class="user">
                                            <label>@T("Reviews.From"):</label>
                                            @if (review.AllowViewingProfiles)
                                            {
                                                <a href="@Url.RouteUrl("CustomerProfile", new { id = review.CustomerId })">@(review.CustomerName)</a>
                                            }
                                            else
                                            {
                                                <span>@review.CustomerName</span>
                                            }
                                        </span>
                                        <span class="date">
                                            <label>@T("Reviews.Date"):</label>
                                            <span>@review.WrittenOnStr</span>
                                        </span>
                                    </div>
                                    @await Html.PartialAsync("_ProductReviewHelpfulness", review.Helpfulness)
                                    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductReviewsPageInsideReview, additionalData = review })
                                    @if (!string.IsNullOrEmpty(review.ReplyText))
                                    {
                                        <div class="reply">
                                            <div class="reply-header">
                                                @T("Reviews.Reply")
                                            </div>
                                            <div class="reply-text">
                                                @Html.Raw(htmlFormatter.FormatText(review.ReplyText, false, true, false, false, false, false))
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                            count++;

                        }
                    </div>
                </div>
            }