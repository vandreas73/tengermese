@model CheckoutShippingMethodModel
@{
    Layout = "_ColumnsOne";

    //title
    NopHtml.AddTitleParts(T("PageTitle.Checkout").Text);
    //page class
    NopHtml.AppendPageCssClassParts("html-checkout-page");
    NopHtml.AppendPageCssClassParts("html-shipping-method-page");
}
<div class="page checkout-page shipping-method-page section-padding">
    @await Component.InvokeAsync(typeof(CheckoutProgressViewComponent), new { step = CheckoutProgressStep.Shipping })
    <div class="section-width">
        <div class="vult-page-title">
            <h2>@T("Checkout.SelectShippingMethod")</h2>
        </div>
        <div class="page-body checkout-data">
            <div class="section shipping-method">
                <form asp-route="CheckoutShippingMethod" method="post">
                    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.CheckoutShippingMethodTop, additionalData = Model })

                    @if (Model.DisplayPickupInStore && Model.PickupPointsModel.AllowPickupInStore)
                    {
                        @await Html.PartialAsync("_PickupPoints", Model.PickupPointsModel)
                        <script asp-location="Footer">
                            $(document).ready(function () {
                                $(document).on('checkout_toggle_pickup_in_store', function (e) {
                                    if (e.checked)
                                        $('.method-list').hide();
                                    else
                                        $('.method-list').show();
                                });
                            });
                        </script>
                    }

                    @if (Model.PickupPointsModel == null || !Model.PickupPointsModel.PickupInStoreOnly)
                    {
                        @if (Model.Warnings.Count == 0)
                        {
                            <ul class="method-list">
                                @for (var i = 0; i < Model.ShippingMethods.Count; i++)
                                {
                                    var shippingMethod = Model.ShippingMethods[i];
                                    <li>
                                        <div class="method-name">
                                            <div class="vult-payment-method">
                                                <input id="shippingoption_@(i)" type="radio" name="shippingoption" value="@(shippingMethod.Name)___@(shippingMethod.ShippingRateComputationMethodSystemName)" checked="@shippingMethod.Selected" />
                                                <label class="vult-radio" for="shippingoption_@(i)">@T("Checkout.SelectShippingMethod.MethodAndFee", shippingMethod.Name, shippingMethod.Fee)</label>
                                                <div class="bullet">
                                                    <div class="line zero"></div><div class="line one"></div><div class="line two"></div><div class="line three"></div><div class="line four"></div><div class="line five"></div><div class="line six"></div><div class="line seven"></div>
                                                </div>
                                            </div>
                                        </div>
                                        @if (!string.IsNullOrEmpty(shippingMethod.Description))
                                        {
                                            <div class="method-description">
                                                @Html.Raw(shippingMethod.Description)
                                            </div>
                                        }
                                    </li>
                                }
                            </ul>
                            if (Model.NotifyCustomerAboutShippingFromMultipleLocations)
                            {
                                <div class="multiple-locations">
                                    @T("Checkout.ShippingMethod.ShippingFromMultipleLocations")
                                </div>
                            }
                            <div class="buttons">
                                <button type="submit" name="nextstep" class="button-1 shipping-method-next-step-button primary-btn"><span>@T("Checkout.NextButton")</span></button>
                            </div>
                        }
                        else
                        {
                            <div class="message-error">
                                <ul>
                                    @foreach (var warning in Model.Warnings)
                                    {
                                        <li>@warning</li>
                                    }
                                </ul>
                            </div>
                        }
                    }

                    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.CheckoutShippingMethodBottom, additionalData = Model })
                </form>
            </div>
            <div class="order-summary">
                <div class="vult-checkout-title">
                    <h2>@T("Checkout.OrderSummary")</h2>
                </div>
                @await Component.InvokeAsync(typeof(OrderSummaryViewComponent))
            </div>
        </div>
    </div>
</div>