@model WishlistModel
@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Tax
@inject IWebHelper webHelper
@inject IWorkContext workContext
@{
    Layout = "_ColumnsOne";

    //title
    NopHtml.AddTitleParts(T("PageTitle.Wishlist").Text);
    //page class
    NopHtml.AppendPageCssClassParts("html-wishlist-page");
}
<div class="page wishlist-page section-padding">
    <div class="section-width">
        <div class="vult-page-title">
            <h2>
                @if (Model.IsEditable)
                {
                    @T("Wishlist")
                }
                else
                {
                    @string.Format(T("Wishlist.WishlistOf").Text, Model.CustomerFullname)
                }
            </h2>
        </div>
        <div class="page-body">
            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.WishlistTop, additionalData = Model })
            @if (Model.Items.Count > 0)
            {
                <div class="wishlist-content">
                    @if (Model.Warnings.Count > 0)
                    {
                        <div class="message-error">
                            <ul>
                                @foreach (var warning in Model.Warnings)
                                {
                                    <li>@warning</li>
                                }
                            </ul>
                        </div>
                    }
                    <form asp-route="Wishlist" method="post">
                        <div class="table-wrapper">
                            <table class="cart">
                                <colgroup>
                                    @if (Model.DisplayAddToCart)
                                    {
                                        <col width="1" />
                                    }
                                    @if (Model.ShowSku)
                                    {
                                        <col width="1" />
                                    }
                                    @if (Model.ShowProductImages)
                                    {
                                        <col width="1" />
                                    }
                                    <col />
                                    <col width="1" />
                                    <col width="1" />
                                    <col width="1" />
                                    @if (Model.IsEditable)
                                    {
                                        <col width="1" />
                                    }
                                </colgroup>
                                <thead>
                                    <tr>
                                        @if (Model.DisplayAddToCart)
                                        {
                                            <th class="add-to-cart">
                                                @T("ShoppingCart.AddToCart")
                                            </th>
                                        }
                                        @if (Model.ShowSku)
                                        {
                                            <th class="sku">
                                                @T("ShoppingCart.SKU")
                                            </th>
                                        }
                                        @if (Model.ShowProductImages)
                                        {
                                            <th class="product-picture">
                                                @T("ShoppingCart.Image")
                                            </th>
                                        }
                                        <th class="product">
                                            @T("ShoppingCart.Product(s)")
                                        </th>
                                        <th class="unit-price">
                                            @T("ShoppingCart.UnitPrice")
                                        </th>
                                        <th class="quantity">
                                            @T("ShoppingCart.Quantity")
                                        </th>
                                        <th class="subtotal">
                                            @T("ShoppingCart.ItemTotal")
                                        </th>
                                        @if (Model.IsEditable)
                                        {
                                            <th class="remove-from-cart">
                                                @T("ShoppingCart.Remove")
                                            </th>
                                        }
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model.Items)
                                    {
                                        <tr>
                                            @if (Model.DisplayAddToCart)
                                            {
                                                <td class="add-to-cart">
                                                    <input type="checkbox" name="addtocart" value="@(item.Id)" />
                                                    <label class="td-title vult_move_cartitem_to_wishlist">@T("ShoppingCart.AddToCart"):</label>
                                                    <a class="Vult-cart vult_move_cartitem_to_wishlist"></a>
                                                </td>
                                            }
                                            @if (Model.ShowSku)
                                            {
                                                <td class="sku">
                                                    <label class="td-title">@T("ShoppingCart.SKU"):</label>
                                                    <span class="sku-number">@item.Sku</span>
                                                </td>
                                            }
                                            @if (Model.ShowProductImages)
                                            {
                                                <td class="product-picture">
                                                    <a href="@Url.RouteUrl("Product", new { SeName = item.ProductSeName })"><img alt="@item.Picture.AlternateText" src="@item.Picture.ImageUrl" title="@item.Picture.Title" /></a>
                                                </td>
                                            }
                                            <td class="product">
                                                <a href="@Url.RouteUrl("Product", new { SeName = item.ProductSeName })" class="product-name">@item.ProductName</a>
                                                @if (!string.IsNullOrEmpty(item.AttributeInfo))
                                                {
                                                    <div class="attributes">
                                                        @Html.Raw(item.AttributeInfo)
                                                    </div>
                                                }
                                                @if (!string.IsNullOrEmpty(item.RecurringInfo))
                                                {
                                                    <div class="recurring-info">
                                                        @Html.Raw(item.RecurringInfo)
                                                    </div>
                                                }
                                                @if (!string.IsNullOrEmpty(item.RentalInfo))
                                                {
                                                    <div class="rental-info">
                                                        @Html.Raw(item.RentalInfo)
                                                    </div>
                                                }
                                                @if (Model.IsEditable && item.AllowItemEditing)
                                                {
                                                    var editCartItemUrl = Url.RouteUrl("Product", new { SeName = item.ProductSeName }, webHelper.GetCurrentRequestProtocol());
                                                    editCartItemUrl = webHelper.ModifyQueryString(editCartItemUrl, "updatecartitemid", item.Id.ToString());
                                                    <div class="edit-item">
                                                        <a class="primary-btn" href="@editCartItemUrl"><span>@T("Common.Edit")</span></a>
                                                    </div>
                                                }
                                                @if (item.Warnings.Count > 0)
                                                {
                                                    <div class="message-error">
                                                        <ul>
                                                            @foreach (var warning in item.Warnings)
                                                            {
                                                                <li>@Html.Raw(warning)</li>
                                                            }
                                                        </ul>
                                                    </div>
                                                }
                                            </td>
                                            <td class="unit-price">
                                                <label class="td-title">@T("ShoppingCart.UnitPrice"):</label>
                                                <span class="product-unit-price">@item.UnitPrice</span>
                                            </td>
                                            <td class="quantity">
                                                <label class="td-title">@T("ShoppingCart.Quantity"):</label>
                                                @if (Model.IsEditable)
                                                {
                                                    if (item.AllowedQuantities.Count > 0)
                                                    {
                                                        <select name="itemquantity@(item.Id)" class="qty-dropdown vult-common-select">
                                                            @foreach (var qty in item.AllowedQuantities)
                                                            {
                                                                <option selected="@qty.Selected" value="@qty.Value">@qty.Value</option>
                                                            }
                                                        </select>
                                                    }
                                                    else
                                                    {
                                                        <input name="itemquantity@(item.Id)" type="text" value="@(item.Quantity)" class="qty-input" aria-label="@T("ShoppingCart.Quantity")" />
                                                    }
                                                }
                                                else
                                                {
                                                    <span class="product-quantity">@item.Quantity</span>
                                                }
                                            </td>
                                            <td class="subtotal">
                                                <label class="td-title">@T("ShoppingCart.ItemTotal"):</label>
                                                <span class="product-subtotal">@item.SubTotal</span>
                                                @if (!string.IsNullOrEmpty(item.Discount))
                                                {
                                                    <div class="discount">
                                                        @T("ShoppingCart.ItemYouSave", item.Discount)
                                                    </div>
                                                    if (item.MaximumDiscountedQty.HasValue)
                                                    {
                                                        <div class="discount-additional-info">
                                                            @T("ShoppingCart.MaximumDiscountedQty", item.MaximumDiscountedQty.Value)
                                                        </div>
                                                    }
                                                }
                                            </td>
                                            @if (Model.IsEditable)
                                            {
                                                <td class="remove-from-cart">
                                                    <input type="checkbox" name="removefromcart" id="removefromcart@(item.Id)" value="@(item.Id)" aria-label="@T("ShoppingCart.Remove")" />
                                                    <label class="vult_remove_cartitem" for="removefromcart@(item.Id)">@T("ShoppingCart.Remove")</label>
                                                    <a class="Vult-delete bs_remove_cart vult_remove_cartitem"></a>
                                                </td>
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <div class="vult-btn-group">
                            <div class="buttons">
                                @if (Model.IsEditable)
                                {
                                    <button type="submit" name="updatecart" id="updatecart" class="vult_update_wishlist_button button-2 update-wishlist-button primary-btn bs_update_wishlist_button "><span>@T("Wishlist.UpdateCart")</span></button>
                                }
                                @if (Model.DisplayAddToCart)
                                {
                                    <button type="submit" name="addtocartbutton" class="button-2 wishlist-add-to-cart-button primary-btn vult_move_allcartitem_to_wishlist-btn vult_wishlist_add_to_cart_button">
                                        <span>@T("ShoppingCart.AddToCart")</span>
                                    </button>

                                    <button type="submit" name="addtocartbutton" value="@T("ShoppingCart.AddToCart")" class="primary-btn vult_wishlist_add_to_cart_button" style="display:none;">
                                        @T("ShoppingCart.AddToCart")
                                    </button>
                                }

                                @if (Model.IsEditable && Model.EmailWishlistEnabled)
                                {
                                    <button type="button" class="button-2 email-a-friend-wishlist-button primary-btn" onclick="setLocation('@Url.RouteUrl("EmailWishlist")')"><span>@T("Wishlist.EmailAFriend")</span></button>
                                }
                            </div>
                            @if (Model.Items.Count > 0 && Model.DisplayTaxShippingInfo)
                            {
                                var inclTax = await workContext.GetTaxDisplayTypeAsync() == TaxDisplayType.IncludingTax;
                                //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                                //of course, you can modify appropriate locales to include VAT info there
                                <div class="tax-shipping-info">
                                    @T(inclTax ? "Wishlist.TaxShipping.InclTax" : "Wishlist.TaxShipping.ExclTax", Url.RouteTopicUrl("shippinginfo"))
                                </div>
                            }
                            @if (Model.IsEditable)
                            {

                                <div class="vult_clear_cart_button">
                                    <button class="primary-btn">
                                        <span>@T("Theme.Vulture.Clear.wishlist")</span>
                                    </button>
                                </div>
                            }
                        </div>
                    </form>
                </div>
            }
            else
            {
                <div class="no-data">
                    @T("Wishlist.CartIsEmpty")
                </div>
            }
            @if (Model.IsEditable && Model.Items.Count > 0)
            {
                var wishlistUrl = Url.RouteUrl("Wishlist", new { customerGuid = Model.CustomerGuid }, webHelper.GetCurrentRequestProtocol());
                <div class="share-info">
                    <span class="share-label">@T("Wishlist.YourWishlistURL"):</span>
                    <a href="@wishlistUrl" class="share-link">@wishlistUrl</a>
                </div>
            }
            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.WishlistBottom, additionalData = Model })
        </div>
    </div>
</div>

<script asp-location="Footer">
    // CLEAR ALL CART ITEMS
    $(".vult_clear_cart_button button").click(function () {
        ClearItem($(this),"removeall" ,"@Html.Raw(JavaScriptEncoder.Default.Encode(T("Theme.Vulture.Clear.wishlist.confirmation.title").Text))","@Html.Raw(JavaScriptEncoder.Default.Encode(T("Theme.Vulture.Clear.wishlistall.confirmation.Description").Text))", "<span>@Html.Raw(JavaScriptEncoder.Default.Encode(T("Theme.Vulture.Clear.Cart.Confirmation.Confirmbuttontext").Text))</span>");
        return false;
    });

    // REMOVE SPECIFIC CART ITEM
    $(".vult_remove_cartitem").click(function () {
        ClearItem($(this),"removeitem" ,"@Html.Raw(JavaScriptEncoder.Default.Encode(T("Theme.Vulture.Clear.Wishlistitem.Confirmation.Title").Text))","@Html.Raw(JavaScriptEncoder.Default.Encode(T("Theme.Vulture.Clear.Wishlist.Confirmation.Description").Text))", "<span>@Html.Raw(JavaScriptEncoder.Default.Encode(T("Theme.Vulture.Clear.Cart.Confirmation.Confirmbuttontext").Text))</span>"  );
        return false;
    });

    // move specific item to cart
    $(".vult_move_cartitem_to_wishlist").click(function () {
        ClearItem($(this),"moveitemtocart" ,"@Html.Raw(JavaScriptEncoder.Default.Encode(T("Theme.Vulture.Move.Wishlistitemtocart.Confirmation.Title").Text))","@Html.Raw(JavaScriptEncoder.Default.Encode(T("Theme.Vulture.Move.Wishitemtocart.Confirmation.Description").Text))" ,"<span>@Html.Raw(JavaScriptEncoder.Default.Encode(T("Theme.Vulture.Move.Itemtocart.Confirmation.Confirmbuttontext").Text))</span>" );
        return false;
    });

    // move all item to cart
    $(".vult_move_allcartitem_to_wishlist-btn").click(function (e) {
        ClearItem($(this),"moveallitemstocart" ,"@Html.Raw(JavaScriptEncoder.Default.Encode(T("Theme.Vulture.Move.Wishlisttocart.Confirmation.Title").Text))","@Html.Raw(JavaScriptEncoder.Default.Encode(T("Theme.Vulture.Move.Allwishlist.Confirmation.Description").Text))","<span>@Html.Raw(JavaScriptEncoder.Default.Encode(T("Theme.Vulture.move.itemtocart.confirmation.Confirmbuttontext").Text))</span>"  );
        return false;
    });

    function ClearItem(element, button, title, text, confirmationtext) {

        Swal.fire({
            title: title,
            text: text,
            icon: 'warning',
            showCancelButton: true,
            customClass: {
                confirmButton: 'primary-btn',
                cancelButton: 'primary-btn',
            },

            confirmButtonColor: '#333',
            cancelButtonColor: '#333',
            confirmButtonText: confirmationtext,
            cancelButtonText: "<span>@Html.Raw(JavaScriptEncoder.Default.Encode(T("Theme.Vulture.Clear.Cart.Confirmation.Cancelbuttontext").Text))</span>",
        }).then((result) => {
            if (result.isConfirmed) {
                if (button == "removeall") {
                    // remove all items from cart
                    $("input[name='removefromcart']:checkbox").prop('checked', true);
                    $(".vult_update_wishlist_button").trigger("click");
                } else if (button == "removeitem") {
                    element.parent().find('input').prop('checked', true)
                    $(".vult_update_wishlist_button").trigger("click");
                }
                else if (button == "moveitemtocart") {
                    element.parent().find('input').prop('checked', true);
                    $(".vult_wishlist_add_to_cart_button").trigger("click");
                }
                else if (button == "moveallitemstocart") {
                    $("input[name='addtocart']:checkbox").prop('checked', true);
                    $(".vult_wishlist_add_to_cart_button").trigger("click");
                }

                swal.fire({
                    title: '',
                    allowEscapeKey: false,
                    allowOutsideClick: false,
                    //timer: 2000,
                    onOpen: () => {
                        swal.showLoading();
                    }
                })
            }
        })

        return false;
    }

</script>