@model CatalogProductsModel

@if (Model.Products.Count <= 0 &&
  !Model.PriceRangeFilter.Enabled &&
  !Model.SpecificationFilter.Enabled &&
  !Model.ManufacturerFilter.Enabled)
{
    return;
}


<div class="product-selectors">
    <div class="vult-page-view-mode">
        <div class="vult-sorting-filter">
            @if (Model.AllowProductSorting)
            {
                <div class="product-sorting">
                    <span>@T("Catalog.OrderBy")</span>
                    @Html.DropDownList("products-orderby", Model.AvailableSortOptions,  new { @class = "vult-common-select-without-search" })
                </div>
                <script asp-location="Footer">
                    $(document).ready(function () {
                        var $orderByEl = $('#products-orderby');
                        $orderByEl.on('change', function () {
                            CatalogProducts.getProducts();
                        });

                        $(CatalogProducts).on('before', function (e) {
                            e.payload.urlBuilder
                                .addParameter('orderby', $orderByEl.val());
                        });

                        $(".vult-common-select-without-search").select2({
                            minimumResultsForSearch: -1,
                            allowClear: true,
                            dropdownCssClass: "vult-dropdown-select-height"
                        });
                    });
                </script>
            }
        </div>

        <div class="vult-size-mode">
            @if (Model.AllowCustomersToSelectPageSize)
            {
                <div class="product-page-size">
                    <span>@T("Catalog.PageSize")</span>
                    @Html.DropDownList("products-pagesize", Model.PageSizeOptions, new { @class = "vult-common-select-without-search" })
                    <span>@T("Catalog.PageSize.PerPage")</span>
                </div>
                <script asp-location="Footer">
                    $(document).ready(function () {
                        var $pageSizeEl = $('#products-pagesize');
                        $pageSizeEl.on('change', function () {
                            CatalogProducts.getProducts();
                        });

                        $(CatalogProducts).on('before', function (e) {
                            e.payload.urlBuilder
                                .addParameter('pagesize', $pageSizeEl.val());
                        });

                        $(".vult-common-select-without-search").select2({
                            minimumResultsForSearch: -1,
                            allowClear: true,
                            dropdownCssClass: "vult-dropdown-select-height"
                        });
                    });
                </script>
            }

            @*view mode*@
            @if (Model.AllowProductViewModeChanging)
            {
                <div class="product-viewmode">
                    <span>@T("Catalog.ViewMode")</span>
                    @if (Model.AvailableViewModes.Count > 1)
                    {
                        var gridMode = Model.AvailableViewModes[0];
                        var listMode = Model.AvailableViewModes[1];

                        <a class="viewmode-icon grid @if (gridMode.Selected){<text>selected</text>}" data-viewmode="@gridMode.Value" title="@gridMode.Text" tabindex="0" aria-role="button" href="#"><span class="Vult-grid-view"></span> @*@gridMode.Text*@</a>
                        <a class="viewmode-icon list @if (listMode.Selected){<text>selected</text>}" data-viewmode="@listMode.Value" title="@listMode.Text" tabindex="0" aria-role="button" href="#"><span class="Vult-list-view"></span> @*@listMode.Text*@</a>
                    }
                </div>
                <script asp-location="Footer">
                    $(document).ready(function () {
                        var $viewModeEls = $('[data-viewmode]');
                        $viewModeEls.on('click', function () {
                            if (!$(this).hasClass('selected')) {
                                $viewModeEls.toggleClass('selected');
                                CatalogProducts.getProducts();
                            }
                            return false;
                        });

                        $(CatalogProducts).on('before', function (e) {
                            var $viewModeEl = $('[data-viewmode].selected');
                            if ($viewModeEl) {
                                e.payload.urlBuilder
                                    .addParameter('viewmode', $viewModeEl.data('viewmode'));
                            }
                        });
                    });
                </script>
            }

        </div>
    </div>
</div>